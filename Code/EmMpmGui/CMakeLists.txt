#/* --------------------------------------------------------------------------*
#* This source code has been cleared for public release by the                *
#* US Air Force 88th Air Base Wing Public Affairs Office under                *
#* case number 88ABW-2010-4857 on Sept. 7, 2010.                              *
#* -------------------------------------------------------------------------- */
# This code is released under the BSD open source license 
PROJECT( EmMpmGui )
cmake_minimum_required(VERSION 2.8)


cmpGenerateVersionString ( ${EmMpmGui_BINARY_DIR}/EmMpmGuiVersion.h "EmMpm_Gui" "EmMpmGui")

# ------------------------------------------------------------------------------
#  Qt 4 Section
# ------------------------------------------------------------------------------
if(QT4_FOUND)
    include( ${QT_USE_FILE} )
    CMP_COPY_QT4_RUNTIME_LIBRARIES( "QtSvg;QtScript" )
    CMP_QT_LIBRARIES_INSTALL_RULES("QtSvg;QtScript" ".")
else()
    message(FATAL_ERROR "Qt 4 is Needed for this project.")
endif(QT4_FOUND)

# Set the GUI type for different platforms
SET(GUI_TYPE )

# ------------------------------------------------------------------------------
#  Qwt Section
# ------------------------------------------------------------------------------
find_package(Qwt)
if (QWT_FOUND)
    include_directories(${QWT_INCLUDE_DIR})
    CMP_COPY_DEPENDENT_LIBRARIES("qwt")
    CMP_LIBRARIES_INSTALL_RULES("qwt" ".")
else()
    message(FATAL_ERROR "Qwt is required for this project")
endif()

# ------------------------------------------------------------------------------
#  Tiff Library Section
# ------------------------------------------------------------------------------
FIND_PACKAGE(Tiff)
IF (NOT TIFF_FOUND)
      MESSAGE (FATAL_ERROR " Tiff Library was NOT Found and is needed.")
ENDIF (NOT TIFF_FOUND)
INCLUDE_DIRECTORIES(${TIFF_INCLUDE_DIRS})

# ------------------------------------------------------------------------------
#  EM/MPM Library Section
# ------------------------------------------------------------------------------
find_package(EMMPM)
if (EMMPM_FOUND)
    include_directories(${EMMPM_INCLUDE_DIR})
    CMP_COPY_DEPENDENT_LIBRARIES("EMMPM")
    CMP_LIBRARIES_INSTALL_RULES("EMMPM" ".")
else()
    message(FATAL_ERROR "EMMPM is required for this project")
endif()

# Set some Win32 Specific Settings
IF(WIN32)
 SET(GUI_TYPE WIN32)
ENDIF(WIN32)

# Set some include directories
include_directories( ${PROJECT_CODE_DIR} )
include_directories( ${PROJECT_CODE_DIR}/EmMpmGui )
include_directories( ${PROJECT_CODE_DIR}/QtSupport )

include_directories( ${EmMpmGui_BINARY_DIR} )
include_directories( ${EIMApps_BINARY_DIR}/MXA)
include_directories( ${EIMApps_BINARY_DIR}/QtSupport )
 
# --------------------------------------------------------------------
# Set up all the source codes
SET( EmMpmGui_SRCS
  ${EmMpmGui_SOURCE_DIR}/main.cpp
  ${EmMpmGui_SOURCE_DIR}/EmMpmGui.cpp
  ${EmMpmGui_SOURCE_DIR}/EMMPMGraphicsView.cpp
  ${EmMpmGui_SOURCE_DIR}/UserInitArea.cpp
  ${EmMpmGui_SOURCE_DIR}/UserInitAreaTableModel.cpp
  ${EmMpmGui_SOURCE_DIR}/UserInitAreaDialog.cpp
  ${EmMpmGui_SOURCE_DIR}/EMMPMTask.cpp
  ${PROJECT_CODE_DIR}/AIM/Common/AIMImage.cpp
)

# another list, this time it includes all header files that should 
#  be treated with moc
SET( EmMpmGui_MOC_HDRS
  ${EmMpmGui_SOURCE_DIR}/EmMpmGui.h
  ${EmMpmGui_SOURCE_DIR}/EMMPMGraphicsView.h
  ${EmMpmGui_SOURCE_DIR}/UserInitArea.h
  ${EmMpmGui_SOURCE_DIR}/UserInitAreaTableModel.h
  ${EmMpmGui_SOURCE_DIR}/UserInitAreaDialog.h
  ${EmMpmGui_SOURCE_DIR}/EMMPMTask.h

)
cmp_IDE_SOURCE_PROPERTIES(EmMpmGui "${EmMpmGui_MOC_HDRS}" "${EmMpmGui_SRCS}" "0")


SET (EmMpmGui_HDRS
#    ${EmMpmGui_SOURCE_DIR}/histogram_item.h
    ${PROJECT_CODE_DIR}/AIM/Common/AIMImage.h
)
cmp_IDE_SOURCE_PROPERTIES(EmMpmGui "${EmMpmGui_HDRS}" "${EmMpmGui_SRCS}" "0")



# The UI files (As generated by Qt Designer
SET( EmMpmGui_UIS
 ${EmMpmGui_SOURCE_DIR}/UI_Files/EmMpmGui.ui
 ${EmMpmGui_SOURCE_DIR}/UI_Files/UserInitAreaDialog.ui
)

# and finally any resource files
SET( EmMpmGui_RCS
 ${PROJECT_RESOURCES_DIR}/icons/images/Icons.qrc
)

# -- Run MOC and UIC on the necessary files   
QT4_ADD_RESOURCES( Generated_RC_SRCS ${EmMpmGui_RCS} )

# this will run uic on .ui files:
QT4_WRAP_UI( Generated_UI_HDRS ${EmMpmGui_UIS} )

# and finally this will run moc:
QT4_WRAP_CPP( Generated_MOC_SRCS ${EmMpmGui_MOC_HDRS} )

#-- Put the generated files into their own group for IDEs
cmp_IDE_GENERATED_PROPERTIES(GuiAlignment/Generated "${Generated_UI_HDRS}" "${Generated_MOC_SRCS}")


# -- Finally set the Project Sources to include all the sources
SET (${PROJECT_NAME}_PROJECT_SRCS 
  ${EmMpmGui_SRCS} 
  ${EmMpmGui_MOC_HDRS}
  ${EmMpmGui_HDRS}
  ${Generated_RC_SRCS} 
  ${Generated_UI_HDRS} 
  ${Generated_MOC_SRCS}
)

#-- Set up OS X Application Bundle properties
#-- This file have tools for OS X Bunlde creation and configuration
#INCLUDE (${CMP_OSX_TOOLS_SOURCE_DIR}/OSX_BundleTools.cmake)

IF(APPLE)
# SET(GUI_TYPE MACOSX_BUNDLE)
# ConfigureMacOSXBundlePlist(${PROJECT_NAME} ${EXE_DEBUG_EXTENSION} 
#                            ${PROJECT_RESOURCES_DIR}/icons/icns/EmMpmGui.icns
#                            ${EIMApps_VERSION}  )
    set(APPLICATION_ICON ${PROJECT_RESOURCES_DIR}/icons/icns/${PROJECT_NAME}.icns)
ENDIF (APPLE)

IF(Q_WS_WIN)
#    include_directories(${PROJECT_RESOURCES_DIR}/icons/ico)
#    configure_file(${PROJECT_RESOURCES_DIR}/icons/ico/IconResource.rc.in ${${PROJECT_NAME}_BINARY_DIR}/${PROJECT_NAME}.rc)
#    SET (${PROJECT_NAME}_PROJECT_SRCS ${${PROJECT_NAME}_PROJECT_SRCS} ${${PROJECT_NAME}_BINARY_DIR}/${PROJECT_NAME}.rc) 
    set(APPLICATION_ICON ${PROJECT_RESOURCES_DIR}/icons/ico/${PROJECT_NAME}.ico)
ENDIF(Q_WS_WIN)

# Clear the file first otherwise we get duplicates
file(WRITE ${PROJECT_BINARY_DIR}/Qt_Plugins.txt "")
FindQt4Plugins("qgif;qjpeg;qtiff" "${PROJECT_BINARY_DIR}/Qt_Plugins.txt" 
                "${PROJECT_BINARY_DIR}/LibSearchDirs.txt" 
                "imageformats" )

if (0)
# ---------- Build the Viewer Application  ----------------------
ADD_EXECUTABLE( ${PROJECT_NAME} ${GUI_TYPE} ${${PROJECT_NAME}_PROJECT_SRCS} )
TARGET_LINK_LIBRARIES(${PROJECT_NAME}
                      ${QT_LIBRARIES}
                      QtSupport
                      ${QWT_LIBRARIES}
                      ${EMMPM_LIBRARIES}
)

# --------------------------------------------------------------------
# Setup our installation rules
set(AppNeedsPlugins "1")                
#message(STATUS "CMP_LIB_SEARCH_DIRS: ${CMP_LIB_SEARCH_DIRS}")
cmp_InstallationSupport(${PROJECT_NAME} 
                        ${EXE_DEBUG_EXTENSION} 
                        ${${PROJECT_NAME}_BINARY_DIR} 
                        "${AppNeedsPlugins}" 
                        "${PROJECT_INSTALL_EXECUTABLES}"
                        "Applications"
                        "."
                        "${CMP_LIB_SEARCH_DIRS}"
                        "${PROJECT_BINARY_DIR}/Qt_Plugins.txt"
                        )
else()
    file(READ ${PROJECT_BINARY_DIR}/Qt_Plugins.txt QT_PLUGINS)
  #  file(READ ${PROJECT_BINARY_DIR}/${PROJECT_NAME}_Plugins.txt OTHER_PLUGINS)
    BuildQtAppBundle(
        TARGET ${PROJECT_NAME}
        SOURCES ${${PROJECT_NAME}_PROJECT_SRCS}
        DEBUG_EXTENSION ${EXE_DEBUG_EXTENSION}
        ICON_FILE  ${APPLICATION_ICON}
        VERSION_MAJOR ${EIMApps_VER_MAJOR}
        VERSION_MINOR ${EIMApps_VER_MINOR}
        VERSION_PATCH ${EIMApps_VER_PATCH}
        BINARY_DIR    ${${PROJECT_NAME}_BINARY_DIR}
        LINK_LIBRARIES ${QT_LIBRARIES} QtSupport ${QWT_LIBRARIES} ${TIFF_LIBRARIES} ${EMMPM_LIBRARIES}
        LIB_SEARCH_DIRS ${CMAKE_LIBRARY_OUTPUT_DIRECTORY} ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}
        QT_PLUGINS    ${QT_PLUGINS}
#        OTHER_PLUGINS ${OTHER_PLUGINS}
        COMPONENT     Applications
        INSTALL_DEST  "."
        )   
endif()

