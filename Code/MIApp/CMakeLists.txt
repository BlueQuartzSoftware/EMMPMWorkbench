#/* --------------------------------------------------------------------------*
#* This source code has been cleared for public release by the                *
#* US Air Force 88th Air Base Wing Public Affairs Office under                *
#* case number 88ABW-2010-4857 on Sept. 7, 2010.                              *
#* -------------------------------------------------------------------------- */
# This code is released under the BSD open source license 
PROJECT( QMIApp )
cmake_minimum_required(VERSION 2.8)

# --------------------------------------------------------------------
# Find the ITK Package
# --------------------------------------------------------------------
IF(ITK_FOUND)
  INCLUDE(${USE_ITK_FILE})
ELSE(ITK_FOUND)
  MESSAGE(FATAL_ERROR "Cannot build without ITK.  Please set ITK_DIR.")
ENDIF(ITK_FOUND)


# ------------------------------------------------------------------------------
#  Qt 4 Section
# ------------------------------------------------------------------------------
if(QT4_FOUND)
    include( ${QT_USE_FILE} )
else()
    message(FATAL_ERROR "Qt 4 is Needed for this project.")
endif(QT4_FOUND)

# Set the GUI type for different platforms
SET(GUI_TYPE )

# Set some Win32 Specific Settings
IF(WIN32)
 SET(GUI_TYPE WIN32)
ENDIF(WIN32)

# Set some include directories
include_directories( ${PROJECT_CODE_DIR} )
include_directories( ${PROJECT_CODE_DIR}/MIApp )
include_directories( ${PROJECT_CODE_DIR}/QtSupport )

include_directories( ${QMIApp_BINARY_DIR} )
include_directories( ${QMIApp_BINARY_DIR}/MXA)
include_directories( ${QMIApp_BINARY_DIR}/QtSupport )
 
# --------------------------------------------------------------------
# Set up all the source codes
SET( QMIApp_SRCS
  ${QMIApp_SOURCE_DIR}/main.cpp
  ${QMIApp_SOURCE_DIR}/QMIApp.cpp
#  ${QMIApp_SOURCE_DIR}/QR3DFixedSliceBox.cpp
#  ${QMIApp_SOURCE_DIR}/QR3DMovingSliceBox.cpp
  ${QMIApp_SOURCE_DIR}/CompositingRenderer.cpp
  ${QMIApp_SOURCE_DIR}/InitArea.cpp
#  ${PROJECT_CODE_DIR}/R3D/MosaicExporter/MosaicExporter.cpp
#  ${PROJECT_CODE_DIR}/R3D/Common/Qt/QRecentFileList.cpp
#  ${PROJECT_CODE_DIR}/R3D/Common/Qt/QDockUtilities.cpp
#  ${PROJECT_CODE_DIR}/R3D/Common/Qt/R3DAboutBox.cpp
)

# another list, this time it includes all header files that should 
#  be treated with moc
SET( QMIApp_MOC_HDRS
#  ${QMIApp_SOURCE_DIR}/QR3DFixedSliceBox.h
#  ${QMIApp_SOURCE_DIR}/QR3DMovingSliceBox.h
  ${QMIApp_SOURCE_DIR}/QMIApp.h
  ${QMIApp_SOURCE_DIR}/CompositingRenderer.h
  ${QMIApp_SOURCE_DIR}/InitArea.h
#  ${PROJECT_CODE_DIR}/R3D/Common/Qt/QRecentFileList.h
#  ${PROJECT_CODE_DIR}/R3D/Common/Qt/R3DAboutBox.h
)
cmp_IDE_SOURCE_PROPERTIES(GuiAlignment "${QMIApp_MOC_HDRS}" "${QMIApp_SRCS}" "${CMP_INSTALL_FILES}")

# The UI files (As generated by Qt Designer
SET( QMIApp_UIS
 ${QMIApp_SOURCE_DIR}/UI_Files/QMIApp.ui
# ${QMIApp_SOURCE_DIR}/UI_Files/QR3DFixedSliceBox.ui
# ${QMIApp_SOURCE_DIR}/UI_Files/QR3DMovingSliceBox.ui
# ${PROJECT_CODE_DIR}/R3D/Common/Qt/UI_Files/R3DAboutBox.ui
)

# and finally any resource files
SET( QMIApp_RCS
#    ${QMIApp_SOURCE_DIR}/shared.qrc
)

# -- Run MOC and UIC on the necessary files   
QT4_ADD_RESOURCES( Generated_RC_SRCS ${QMIApp_RCS} )

# this will run uic on .ui files:
QT4_WRAP_UI( Generated_UI_HDRS ${QMIApp_UIS} )

# and finally this will run moc:
QT4_WRAP_CPP( Generated_MOC_SRCS ${QMIApp_MOC_HDRS} )

#-- Put the generated files into their own group for IDEs
cmp_IDE_GENERATED_PROPERTIES(GuiAlignment/Generated "${Generated_UI_HDRS}" "${Generated_MOC_SRCS}")


# -- Finally set the Project Sources to include all the sources
SET (${PROJECT_NAME}_PROJECT_SRCS 
  ${QMIApp_SRCS} 
  ${QMIApp_MOC_HDRS}
  ${Generated_RC_SRCS} 
  ${Generated_UI_HDRS} 
  ${Generated_MOC_SRCS}
)

set (PluginListFile ${QMIApp_BINARY_DIR}/plugins.txt)
set (LibDirSearchFile ${QMIApp_BINARY_DIR}/libsearchdirs.txt)
file(WRITE ${PluginListFile} "")
file(WRITE ${LibDirSearchFile} "${EIMApps_BINARY_DIR}/Bin/plugins;")

# Find all the Qt Plugins after which we should have some more variables to our disposal
FindQt4Plugins("qgif;qjpeg;qtiff" "${PluginListFile}" "${LibDirSearchFile}" "imageformats")

file(READ ${PluginListFile}  COMPLETE_PLUGIN_LIST)
file(READ ${LibDirSearchFile} PLUGIN_SEARCH_DIRS)


#-- Set up OS X Application Bundle properties
#-- This file have tools for OS X Bunlde creation and configuration
INCLUDE (${CMP_OSX_TOOLS_SOURCE_DIR}/OSX_BundleTools.cmake)
SET (EXE_DEBUG_EXTENSION "_debug")
IF(APPLE)
 SET(GUI_TYPE MACOSX_BUNDLE)
 ConfigureMacOSXBundlePlist(QMIApp ${EXE_DEBUG_EXTENSION} 
                            ${PROJECT_RESOURCES_DIR}/icons/icns/QMIApp.icns
                            ${EIMApps_VERSION}  )
ENDIF (APPLE)

IF(Q_WS_WIN)
    include_directories(${PROJECT_RESOURCES_DIR}/icons/ico)
    configure_file(${PROJECT_RESOURCES_DIR}/icons/ico/IconResource.rc.in ${${PROJECT_NAME}_BINARY_DIR}/${PROJECT_NAME}.rc)
    SET (${PROJECT_NAME}_PROJECT_SRCS ${${PROJECT_NAME}_PROJECT_SRCS} ${${PROJECT_NAME}_BINARY_DIR}/${PROJECT_NAME}.rc) 
ENDIF(Q_WS_WIN)

# ---------- Build the Viewer Application  ----------------------
ADD_EXECUTABLE( QMIApp ${GUI_TYPE} ${${PROJECT_NAME}_PROJECT_SRCS} )
TARGET_LINK_LIBRARIES(QMIApp
                      ${QT_LIBRARIES}
                        ${ITK_LIBRARIES}
                        AIMLib
                        QtSupport
                        MXADataModel
                        AngReader
                        )


cmp_InstallationSupport(QMIApp ${EXE_DEBUG_EXTENSION} ${${PROJECT_NAME}_BINARY_DIR} "1")



